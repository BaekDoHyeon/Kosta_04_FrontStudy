package com.web.spring;

import java.time.LocalDateTime;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.web.spring.entity.Custom;
import com.web.spring.repository.CustomRepository;

import jakarta.transaction.Transactional;

//CustomRepository를 주입...Spring Data JPA가 생성하는 빈을 여기서 가져다 쓴다...
@SpringBootApplication
public class Boot05JpaRepositoryApplication implements CommandLineRunner {

	//주입된 해당 빈을 사용해서 CRUD 작업을 다 할 수 있다.
	//트랜잭션 단위로... EntityManager가 내부적으로 모든 일을 처리할 것이다.
	@Autowired
	private CustomRepository customRepository;
	
	@Override
	@Transactional //jpa메소드가 호출될 때 트랜잭션이 실행되고, 메소드가 종료될 때 트랜잭션이 끝난다.
	public void run(String... args) throws Exception {
		/*
		 * Optional<Custom> ot = customRepository.findById(1); 
		 * System.out.println(ot);
		 */
		
		/*
		 * Custom c = customRepository.findById(1).orElseThrow();
		 * System.out.println("1번 고객에 대한 정보입니다..." + c);
		 */
		
		//CustomRepository를 실제로 구현하고 있는 구현체를 출력
		/*
		   $Proxy
		   ::
		   Proxy는 인터페이스를 구현하고 있는 객체를 동적으로 생성해주는 자바 기술
		   모든 자바 프레임워크 구현체들은 Proxy 기술을 이용해서 만들어진다.
		
		   System.out.println(customRepository.getClass().getName());
		*/
		
		//2. 새로운 Custom 을 추가
		/*
		Custom c1 = new Custom();
		c1.setName("James");
		c1.setEmail("jas@naver.com");
		c1.setPassword("2222");
		c1.setRegDate(LocalDateTime.now());
		
		customRepository.save(c1);
		*/
		
		//3. 방금 추가한 사람을 삭제
		//3-1. customRepository.deleteById(8);
		Custom deleteC = customRepository.findById(7).orElseThrow();
		customRepository.delete(deleteC);
	}
	
	public static void main(String[] args) {
		SpringApplication.run(Boot05JpaRepositoryApplication.class, args);
	}

}
